name: Create Release from Vault

on:
  push:
    branches: [ "main" ]

permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Install yq (YAML CLI parser)
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/download/v4.35.2/yq_linux_amd64 -O /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq

      - name: Extract version, name, and notes from markdown front matter
        id: extract_data
        run: |
          VERSION=$(yq e '.version' release-info.md)
          NOTES=$(yq e '.release_notes' release-info.md)
          NAME=$(yq e '.release_name' release-info.md)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "release_notes=$NOTES" >> $GITHUB_OUTPUT
          echo "release_name=$NAME" >> $GITHUB_OUTPUT

      - name: Zip the vault
        run: |
          zip -r obsidian-vault-${{ steps.extract_data.outputs.version }}.zip ./*

      - name: Check if release already exists
        id: check_release
        run: |
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.extract_data.outputs.version }})
          if [ "$HTTP_STATUS" = "200" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Delete existing release and tag if found
        if: steps.check_release.outputs.exists == 'true'
        run: |
          RELEASE_ID=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.extract_data.outputs.version }} \
            | jq -r .id)

          # Delete the existing release
          curl -s \
            -X DELETE \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID

          # Delete the existing tag reference
          curl -s \
            -X DELETE \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/git/refs/tags/${{ steps.extract_data.outputs.version }}

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.extract_data.outputs.version }}
          release_name: ${{ steps.extract_data.outputs.release_name }}
          body: ${{ steps.extract_data.outputs.release_notes }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: obsidian-vault-${{ steps.extract_data.outputs.version }}.zip
          asset_name: obsidian-vault-${{ steps.extract_data.outputs.version }}.zip
          asset_content_type: application/zip
